{"version":3,"sources":["types/types.ts","components/NumberDisplay/NumberDisplay.tsx","utils/utils.ts","constants/constants.ts","components/Button/Button.tsx","components/Text/Text.tsx","components/App/App.tsx","index.tsx"],"names":["CellValue","CellState","Face","DisplayNumber","value","className","Math","abs","toString","padStart","grabAllAdjacentCells","cells","rowParam","colParam","topLeftCell","topCell","topRightCell","MAX_COLS","leftCell","rightCell","bottomLeftCell","MAX_ROWS","bottomCell","bottomRightCell","generateCells","row","push","col","none","state","open","bombsPlaced","randomRow","floor","random","randomCol","bomb","map","rowIndex","cell","colIndex","currentCell","numberOfBombs","openMultipleCells","visible","flagged","newCells","slice","Button","onContext","onClick","red","role","tabIndex","onKeyDown","onContextMenu","aria-label","Text","text","time","hasLost","hasWon","App","useState","setCells","smile","face","setFace","setTime","live","setLive","bombCounter","setBombCounter","setHasLost","setHasWon","timeResult","setTimeResult","useEffect","timer","setInterval","clearInterval","lost","won","handleCellClick","isABomb","includes","showAllBombs","safeOpenCellsExists","handleCellContext","e","preventDefault","currentCells","handleFaceClick","uuidv4","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.700d4f7c.chunk.js","sourcesContent":["export enum CellValue {\r\n  none,\r\n  one,\r\n  two,\r\n  three,\r\n  four,\r\n  five,\r\n  six,\r\n  seven,\r\n  eight,\r\n  bomb,\r\n}\r\n\r\nexport enum CellState {\r\n  open,\r\n  visible,\r\n  flagged,\r\n}\r\n\r\nexport type Cell = { value: CellValue; state: CellState; red?: boolean };\r\n\r\nexport enum Face {\r\n  smile = 'ðŸ˜ƒ',\r\n  oh = 'ðŸ˜®',\r\n  lost = 'ðŸ˜«',\r\n  won = 'ðŸ¤©',\r\n}\r\n","import React from 'react';\r\nimport './NumberDisplay.scss';\r\n\r\ninterface NumberDisplayProps {\r\n  value: number;\r\n}\r\n\r\nconst DisplayNumber: React.FC<NumberDisplayProps> = ({ value }) => {\r\n  return <div className=\"NumberDisplay\">{value < 0 ? `-${Math.abs(value).toString().padStart(2, '0')}` : value.toString().padStart(3, '0')}</div>;\r\n};\r\n\r\nexport default DisplayNumber;\r\n","import { MAX_ROWS, MAX_COLS, BOMBS } from '../constants/constants';\r\nimport { CellValue, CellState, Cell } from '../types/types';\r\n\r\nconst grabAllAdjacentCells = (\r\n  cells: Cell[][],\r\n  rowParam: number,\r\n  colParam: number\r\n): {\r\n  topLeftCell: Cell | null;\r\n  topCell: Cell | null;\r\n  topRightCell: Cell | null;\r\n  leftCell: Cell | null;\r\n  rightCell: Cell | null;\r\n  bottomLeftCell: Cell | null;\r\n  bottomCell: Cell | null;\r\n  bottomRightCell: Cell | null;\r\n} => {\r\n  const topLeftCell =\r\n    rowParam > 0 && colParam > 0 ? cells[rowParam - 1][colParam - 1] : null;\r\n  const topCell = rowParam > 0 ? cells[rowParam - 1][colParam] : null;\r\n  const topRightCell =\r\n    rowParam > 0 && colParam < MAX_COLS - 1\r\n      ? cells[rowParam - 1][colParam + 1]\r\n      : null;\r\n  const leftCell = colParam > 0 ? cells[rowParam][colParam - 1] : null;\r\n  const rightCell =\r\n    colParam < MAX_COLS - 1 ? cells[rowParam][colParam + 1] : null;\r\n  const bottomLeftCell =\r\n    rowParam < MAX_ROWS - 1 && colParam > 0\r\n      ? cells[rowParam + 1][colParam - 1]\r\n      : null;\r\n  const bottomCell =\r\n    rowParam < MAX_ROWS - 1 ? cells[rowParam + 1][colParam] : null;\r\n  const bottomRightCell =\r\n    rowParam < MAX_ROWS - 1 && colParam < MAX_COLS - 1\r\n      ? cells[rowParam + 1][colParam + 1]\r\n      : null;\r\n\r\n  return {\r\n    topLeftCell,\r\n    topCell,\r\n    topRightCell,\r\n    leftCell,\r\n    rightCell,\r\n    bottomLeftCell,\r\n    bottomCell,\r\n    bottomRightCell\r\n  };\r\n};\r\n\r\nexport const generateCells = (): Cell[][] => {\r\n  let cells: Cell[][] = [];\r\n\r\n  // generating all cells\r\n  for (let row = 0; row < MAX_ROWS; row++) {\r\n    cells.push([]);\r\n    for (let col = 0; col < MAX_COLS; col++) {\r\n      cells[row].push({\r\n        value: CellValue.none,\r\n        state: CellState.open\r\n      });\r\n    }\r\n  }\r\n\r\n  // randomly put 10 bombs\r\n  let bombsPlaced = 0;\r\n  while (bombsPlaced < BOMBS) {\r\n    const randomRow = Math.floor(Math.random() * MAX_ROWS);\r\n    const randomCol = Math.floor(Math.random() * MAX_COLS);\r\n\r\n    const currentCell = cells[randomRow][randomCol];\r\n    if (currentCell.value !== CellValue.bomb) {\r\n      cells = cells.map((row, rowIndex) =>\r\n        row.map((cell, colIndex) => {\r\n          if (randomRow === rowIndex && randomCol === colIndex) {\r\n            return {\r\n              ...cell,\r\n              value: CellValue.bomb\r\n            };\r\n          }\r\n\r\n          return cell;\r\n        })\r\n      );\r\n      bombsPlaced += 1;\r\n    }\r\n  }\r\n\r\n  // calculate the numbers for each cell\r\n  for (let rowIndex = 0; rowIndex < MAX_ROWS; rowIndex++) {\r\n    for (let colIndex = 0; colIndex < MAX_COLS; colIndex++) {\r\n      const currentCell = cells[rowIndex][colIndex];\r\n      if (currentCell.value === CellValue.bomb) {\r\n        continue;\r\n      }\r\n\r\n      let numberOfBombs = 0;\r\n      const {\r\n        topLeftCell,\r\n        topCell,\r\n        topRightCell,\r\n        leftCell,\r\n        rightCell,\r\n        bottomLeftCell,\r\n        bottomCell,\r\n        bottomRightCell\r\n      } = grabAllAdjacentCells(cells, rowIndex, colIndex);\r\n\r\n      if (topLeftCell?.value === CellValue.bomb) {\r\n        numberOfBombs += 1;\r\n      }\r\n      if (topCell?.value === CellValue.bomb) {\r\n        numberOfBombs += 1;\r\n      }\r\n      if (topRightCell?.value === CellValue.bomb) {\r\n        numberOfBombs += 1;\r\n      }\r\n      if (leftCell?.value === CellValue.bomb) {\r\n        numberOfBombs += 1;\r\n      }\r\n      if (rightCell?.value === CellValue.bomb) {\r\n        numberOfBombs += 1;\r\n      }\r\n      if (bottomLeftCell?.value === CellValue.bomb) {\r\n        numberOfBombs += 1;\r\n      }\r\n      if (bottomCell?.value === CellValue.bomb) {\r\n        numberOfBombs += 1;\r\n      }\r\n      if (bottomRightCell?.value === CellValue.bomb) {\r\n        numberOfBombs += 1;\r\n      }\r\n\r\n      if (numberOfBombs > 0) {\r\n        cells[rowIndex][colIndex] = {\r\n          ...currentCell,\r\n          value: numberOfBombs\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  return cells;\r\n};\r\n\r\nexport const openMultipleCells = (\r\n  cells: Cell[][],\r\n  rowParam: number,\r\n  colParam: number\r\n): Cell[][] => {\r\n  const currentCell = cells[rowParam][colParam];\r\n\r\n  if (\r\n    currentCell.state === CellState.visible ||\r\n    currentCell.state === CellState.flagged\r\n  ) {\r\n    return cells;\r\n  }\r\n\r\n  let newCells = cells.slice();\r\n  newCells[rowParam][colParam].state = CellState.visible;\r\n\r\n  const {\r\n    topLeftCell,\r\n    topCell,\r\n    topRightCell,\r\n    leftCell,\r\n    rightCell,\r\n    bottomLeftCell,\r\n    bottomCell,\r\n    bottomRightCell\r\n  } = grabAllAdjacentCells(cells, rowParam, colParam);\r\n\r\n  if (\r\n    topLeftCell?.state === CellState.open &&\r\n    topLeftCell.value !== CellValue.bomb\r\n  ) {\r\n    if (topLeftCell.value === CellValue.none) {\r\n      newCells = openMultipleCells(newCells, rowParam - 1, colParam - 1);\r\n    } else {\r\n      newCells[rowParam - 1][colParam - 1].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  if (topCell?.state === CellState.open && topCell.value !== CellValue.bomb) {\r\n    if (topCell.value === CellValue.none) {\r\n      newCells = openMultipleCells(newCells, rowParam - 1, colParam);\r\n    } else {\r\n      newCells[rowParam - 1][colParam].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    topRightCell?.state === CellState.open &&\r\n    topRightCell.value !== CellValue.bomb\r\n  ) {\r\n    if (topRightCell.value === CellValue.none) {\r\n      newCells = openMultipleCells(newCells, rowParam - 1, colParam + 1);\r\n    } else {\r\n      newCells[rowParam - 1][colParam + 1].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  if (leftCell?.state === CellState.open && leftCell.value !== CellValue.bomb) {\r\n    if (leftCell.value === CellValue.none) {\r\n      newCells = openMultipleCells(newCells, rowParam, colParam - 1);\r\n    } else {\r\n      newCells[rowParam][colParam - 1].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    rightCell?.state === CellState.open &&\r\n    rightCell.value !== CellValue.bomb\r\n  ) {\r\n    if (rightCell.value === CellValue.none) {\r\n      newCells = openMultipleCells(newCells, rowParam, colParam + 1);\r\n    } else {\r\n      newCells[rowParam][colParam + 1].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    bottomLeftCell?.state === CellState.open &&\r\n    bottomLeftCell.value !== CellValue.bomb\r\n  ) {\r\n    if (bottomLeftCell.value === CellValue.none) {\r\n      newCells = openMultipleCells(newCells, rowParam + 1, colParam - 1);\r\n    } else {\r\n      newCells[rowParam + 1][colParam - 1].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    bottomCell?.state === CellState.open &&\r\n    bottomCell.value !== CellValue.bomb\r\n  ) {\r\n    if (bottomCell.value === CellValue.none) {\r\n      newCells = openMultipleCells(newCells, rowParam + 1, colParam);\r\n    } else {\r\n      newCells[rowParam + 1][colParam].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    bottomRightCell?.state === CellState.open &&\r\n    bottomRightCell.value !== CellValue.bomb\r\n  ) {\r\n    if (bottomRightCell.value === CellValue.none) {\r\n      newCells = openMultipleCells(newCells, rowParam + 1, colParam + 1);\r\n    } else {\r\n      newCells[rowParam + 1][colParam + 1].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  return newCells;\r\n};\r\n","export const MAX_ROWS = 9;\r\nexport const MAX_COLS = 9;\r\nexport const BOMBS = 10;","import React from 'react';\r\nimport { CellState, CellValue } from '../../types/types';\r\nimport './Button.scss';\r\n\r\ninterface ButtonProps {\r\n  row: number;\r\n  col: number;\r\n  state: CellState;\r\n  value: CellValue;\r\n  onClick(rowParam: number, colParam: number): (...args: any[]) => void;\r\n  onContext(rowParam: number, colParam: number): (...args: any[]) => void;\r\n  red?: boolean;\r\n}\r\n\r\nexport const Button: React.FC<ButtonProps> = ({ \r\n  row, col, state, onContext, value, onClick, red }) => {\r\n  const renderContent = (): React.ReactNode => {\r\n    if (state === CellState.visible) {\r\n      if (value === CellValue.bomb) {\r\n        return (\r\n          <span role=\"img\" aria-label=\"bomb\">\r\n            ðŸ’£\r\n          </span>\r\n        );\r\n      } \r\n      if (value === CellValue.none) {\r\n        return null;\r\n      }\r\n\r\n      return value;\r\n\r\n    } if (state === CellState.flagged) {\r\n      return (\r\n        <span role=\"img\" aria-label=\"flag\">\r\n          ðŸš©\r\n        </span>\r\n      );\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      role=\"button\"\r\n      className={`Button ${state === CellState.visible ? 'visible' : ''} value-${value} ${red ? 'red' : ''}`}\r\n      onClick={onClick(row, col)}\r\n      tabIndex={0}\r\n      onKeyDown={onClick(row, col)}\r\n      onContextMenu={onContext(row, col)}\r\n    >\r\n      {renderContent()}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './Text.scss';\r\n\r\ninterface TextProps {\r\n  text: string;\r\n  time: number;\r\n  hasWon?: boolean;\r\n  hasLost?: boolean;\r\n}\r\n\r\nexport const Text: React.FC<TextProps> = ({ text, time, hasLost, hasWon }) => {\r\n  return (\r\n    <div className={`Text ${hasWon ? 'green' : ''} ${hasLost ? 'red' : ''}`}>\r\n      <h3>\r\n        {text} in {time} sec\r\n      </h3>\r\n      <p>To restart press the Emoji button</p>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport './App.scss';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport NumberDisplay from '../NumberDisplay/NumberDisplay';\r\nimport { generateCells, openMultipleCells } from '../../utils/utils';\r\nimport { Button } from '../Button/Button';\r\nimport { Cell, CellState, CellValue, Face } from '../../types/types';\r\nimport { MAX_COLS, MAX_ROWS } from '../../constants/constants';\r\nimport { Text } from '../Text/Text';\r\n\r\nconst App: React.FC = () => {\r\n  const [cells, setCells] = useState<Cell[][]>(generateCells());\r\n  const [face, setFace] = useState<Face>(Face.smile);\r\n  const [time, setTime] = useState<number>(0);\r\n  const [live, setLive] = useState<boolean>(false);\r\n  const [bombCounter, setBombCounter] = useState(10);\r\n  const [hasLost, setHasLost] = useState<boolean>(false);\r\n  const [hasWon, setHasWon] = useState<boolean>(false);\r\n  const [timeResult, setTimeResult] = useState<number>(0);\r\n\r\n\r\n  // On every mouse down/up change face - It doesn't work normally!!\r\n\r\n  // useEffect(() => {\r\n  //   const handleMouseDown = (): void => {\r\n  //     setFace(Face.oh);\r\n  //   };\r\n\r\n  //   // const handleMouseUp = (): void => {\r\n  //   //   setFace(Face.smile);\r\n  //   // };\r\n\r\n  //   window.addEventListener('mousedown', handleMouseDown);\r\n  //   // window.addEventListener('mouseup', handleMouseUp);\r\n\r\n  //   return () => {\r\n  //     window.removeEventListener('mousedown', handleMouseDown);\r\n  //     // window.removeEventListener('mouseup', handleMouseUp);\r\n  //   };\r\n  // }, [live]);\r\n\r\n  // add time in the start (live) till hasWon/hasLost, after clear\r\n\r\n  useEffect(() => {\r\n    if (live && time < 999 && !hasLost && !hasWon) {\r\n      const timer = setInterval(() => {\r\n        setTime(time + 1);\r\n      }, 1000);\r\n\r\n      return () => {\r\n        clearInterval(timer);\r\n      };\r\n    }\r\n  }, [live, time, hasLost, hasWon]);\r\n\r\n  useEffect(() => {\r\n    if (hasLost) {\r\n      setLive(false);\r\n      setFace(Face.lost);\r\n      setTimeResult(time);\r\n    }\r\n\r\n    return () => {\r\n      setFace(Face.smile);\r\n    };\r\n  }, [hasLost, time]);\r\n\r\n  useEffect(() => {\r\n    if (hasWon) {\r\n      setLive(false);\r\n      setFace(Face.won);\r\n      setTimeResult(time);\r\n    }\r\n  }, [hasWon, time]);\r\n\r\n  const handleCellClick = (rowParam: number, colParam: number) => (): void => {\r\n    let newCells = cells.slice();\r\n\r\n    // start the game, if in the beginning of game on click is bomb, generate new cells till 1 click is not a bomb\r\n\r\n    if (!live) {\r\n      let isABomb = newCells[rowParam][colParam].value === CellValue.bomb;\r\n      while (isABomb) {\r\n        newCells = generateCells();\r\n        if (newCells[rowParam][colParam].value !== CellValue.bomb) {\r\n          isABomb = false;\r\n          break;\r\n        }\r\n      }\r\n      setLive(true);\r\n    }\r\n\r\n    let currentCell = newCells[rowParam][colParam];\r\n\r\n    // if currentCell state is flagged or visible\r\n\r\n    if ([CellState.flagged, CellState.visible].includes(currentCell.state) || hasLost || hasWon) {\r\n      return;\r\n    }\r\n\r\n    // if currentCell value is bomb -> hasLost and red property and show all other bombs, if is none  -> open multiple cells\r\n    if (currentCell.value === CellValue.bomb) {\r\n      setHasLost(true);\r\n      newCells[rowParam][colParam].red = true;\r\n      newCells = showAllBombs();\r\n      setCells(newCells);\r\n      return;\r\n    } else if (currentCell.value === CellValue.none) {\r\n      newCells = openMultipleCells(newCells, rowParam, colParam);\r\n    } else {\r\n      newCells[rowParam][colParam].state = CellState.visible;\r\n    }\r\n\r\n    // Check to see if you have won\r\n    let safeOpenCellsExists = false;\r\n    for (let row = 0; row < MAX_ROWS; row++) {\r\n      for (let col = 0; col < MAX_COLS; col++) {\r\n        currentCell = newCells[row][col];\r\n\r\n        if (currentCell.value !== CellValue.bomb && currentCell.state === CellState.open) {\r\n          safeOpenCellsExists = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!safeOpenCellsExists) {\r\n      newCells = newCells.map((row) =>\r\n        row.map((cell) => {\r\n          if (cell.value === CellValue.bomb) {\r\n            return {\r\n              ...cell,\r\n              state: CellState.flagged,\r\n            };\r\n          }\r\n          return cell;\r\n        })\r\n      );\r\n      setHasWon(true);\r\n    }\r\n\r\n    setCells(newCells);\r\n  };\r\n\r\n  const handleCellContext = (rowParam: number, colParam: number) => (\r\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>\r\n  ): void => {\r\n    e.preventDefault();\r\n\r\n    if (!live || hasLost || hasWon) {\r\n      return;\r\n    }\r\n\r\n    const currentCells = cells.slice();\r\n    const currentCell = cells[rowParam][colParam];\r\n\r\n    if (currentCell.state === CellState.visible) {\r\n      return;\r\n    } else if (currentCell.state === CellState.open) {\r\n      currentCells[rowParam][colParam].state = CellState.flagged;\r\n      setCells(currentCells);\r\n      setBombCounter(bombCounter - 1);\r\n    } else if (currentCell.state === CellState.flagged) {\r\n      currentCells[rowParam][colParam].state = CellState.open;\r\n      setCells(currentCells);\r\n      setBombCounter(bombCounter + 1);\r\n    }\r\n  };\r\n\r\n  const handleFaceClick = (): void => {\r\n    setLive(false);\r\n    setTime(0);\r\n    setCells(generateCells());\r\n    setHasLost(false);\r\n    setHasWon(false);\r\n  };\r\n\r\n  const renderCells = (): React.ReactNode => {\r\n    return cells.map((row, rowIndex) =>\r\n      row.map((cell, colIndex) => (\r\n        <Button\r\n          col={colIndex}\r\n          key={uuidv4()}\r\n          onClick={handleCellClick}\r\n          onContext={handleCellContext}\r\n          red={cell.red}\r\n          row={rowIndex}\r\n          state={cell.state}\r\n          value={cell.value}\r\n        />\r\n      ))\r\n    );\r\n  };\r\n\r\n  const showAllBombs = (): Cell[][] => {\r\n    const currentCells = cells.slice();\r\n    return currentCells.map((row) =>\r\n      row.map((cell) => {\r\n        if (cell.value === CellValue.bomb) {\r\n          return {\r\n            ...cell,\r\n            state: CellState.visible,\r\n          };\r\n        }\r\n\r\n        return cell;\r\n      })\r\n    );\r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <div className=\"App\">\r\n        <div className=\"Header\">\r\n          <NumberDisplay value={bombCounter} />\r\n          <div\r\n            className=\"Face\"\r\n            onClick={handleFaceClick}\r\n            role=\"button\"\r\n            tabIndex={0}\r\n            onKeyDown={handleFaceClick}\r\n          >\r\n            <span role=\"img\" aria-label=\"face\">\r\n              {face}\r\n            </span>\r\n          </div>\r\n          <NumberDisplay value={time} />\r\n        </div>\r\n        <div className=\"Body\">{renderCells()}</div>\r\n      </div>\r\n      {hasWon && (\r\n        <Text\r\n          text=\"You won\"\r\n          time={timeResult}\r\n          hasWon={hasWon}\r\n        />\r\n      )}\r\n      {hasLost && (\r\n        <Text\r\n          text=\"You lost\"\r\n          time={timeResult}\r\n          hasLost={hasLost}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}